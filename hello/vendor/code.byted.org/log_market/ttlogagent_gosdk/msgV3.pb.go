// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msgV3.proto

/*
	Package ttlogagent_gosdk is a generated protocol buffer package.

	It is generated from these files:
		msgV3.proto

	It has these top-level messages:
		MsgV3Batch
		TraceLogBatch
		BatchHeader
		MsgV3
		TraceLog
		MsgV3Header
		KeyValueV3
*/
package ttlogagent_gosdk

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgV3Batch struct {
	BatchHeader *BatchHeader `protobuf:"bytes,1,opt,name=batchHeader" json:"batchHeader,omitempty"`
	Msgs        []*MsgV3     `protobuf:"bytes,2,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *MsgV3Batch) Reset()                    { *m = MsgV3Batch{} }
func (m *MsgV3Batch) String() string            { return proto.CompactTextString(m) }
func (*MsgV3Batch) ProtoMessage()               {}
func (*MsgV3Batch) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{0} }

func (m *MsgV3Batch) GetBatchHeader() *BatchHeader {
	if m != nil {
		return m.BatchHeader
	}
	return nil
}

func (m *MsgV3Batch) GetMsgs() []*MsgV3 {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type TraceLogBatch struct {
	BatchHeader *BatchHeader `protobuf:"bytes,1,opt,name=batchHeader" json:"batchHeader,omitempty"`
	TraceLogs   []*TraceLog  `protobuf:"bytes,2,rep,name=traceLogs" json:"traceLogs,omitempty"`
}

func (m *TraceLogBatch) Reset()                    { *m = TraceLogBatch{} }
func (m *TraceLogBatch) String() string            { return proto.CompactTextString(m) }
func (*TraceLogBatch) ProtoMessage()               {}
func (*TraceLogBatch) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{1} }

func (m *TraceLogBatch) GetBatchHeader() *BatchHeader {
	if m != nil {
		return m.BatchHeader
	}
	return nil
}

func (m *TraceLogBatch) GetTraceLogs() []*TraceLog {
	if m != nil {
		return m.TraceLogs
	}
	return nil
}

type BatchHeader struct {
	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Cluster  string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Psm      string `protobuf:"bytes,4,opt,name=psm,proto3" json:"psm,omitempty"`
	PodName  string `protobuf:"bytes,5,opt,name=podName,proto3" json:"podName,omitempty"`
	Stage    string `protobuf:"bytes,6,opt,name=stage,proto3" json:"stage,omitempty"`
	Host     []byte `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	Idc      string `protobuf:"bytes,8,opt,name=idc,proto3" json:"idc,omitempty"`
}

func (m *BatchHeader) Reset()                    { *m = BatchHeader{} }
func (m *BatchHeader) String() string            { return proto.CompactTextString(m) }
func (*BatchHeader) ProtoMessage()               {}
func (*BatchHeader) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{2} }

func (m *BatchHeader) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *BatchHeader) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *BatchHeader) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BatchHeader) GetPsm() string {
	if m != nil {
		return m.Psm
	}
	return ""
}

func (m *BatchHeader) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *BatchHeader) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *BatchHeader) GetHost() []byte {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *BatchHeader) GetIdc() string {
	if m != nil {
		return m.Idc
	}
	return ""
}

type MsgV3 struct {
	Header *MsgV3Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Tags   []*KeyValueV3 `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Data   []byte        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgV3) Reset()                    { *m = MsgV3{} }
func (m *MsgV3) String() string            { return proto.CompactTextString(m) }
func (*MsgV3) ProtoMessage()               {}
func (*MsgV3) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{3} }

func (m *MsgV3) GetHeader() *MsgV3Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgV3) GetTags() []*KeyValueV3 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MsgV3) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TraceLog struct {
	Level         string        `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Location      string        `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	LogID         string        `protobuf:"bytes,3,opt,name=logID,proto3" json:"logID,omitempty"`
	Ts            int64         `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Type          string        `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	SpanID        uint64        `protobuf:"varint,6,opt,name=spanID,proto3" json:"spanID,omitempty"`
	ParentSpanID  uint64        `protobuf:"varint,7,opt,name=parentSpanID,proto3" json:"parentSpanID,omitempty"`
	CostInUs      int64         `protobuf:"varint,8,opt,name=costInUs,proto3" json:"costInUs,omitempty"`
	LocalMethod   string        `protobuf:"bytes,9,opt,name=localMethod,proto3" json:"localMethod,omitempty"`
	RemoteMethod  string        `protobuf:"bytes,10,opt,name=remoteMethod,proto3" json:"remoteMethod,omitempty"`
	RemoteCluster string        `protobuf:"bytes,11,opt,name=remoteCluster,proto3" json:"remoteCluster,omitempty"`
	RemoteService string        `protobuf:"bytes,12,opt,name=remoteService,proto3" json:"remoteService,omitempty"`
	RemoteAddress []byte        `protobuf:"bytes,13,opt,name=remoteAddress,proto3" json:"remoteAddress,omitempty"`
	StatusCode    int32         `protobuf:"varint,14,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Tags          []*KeyValueV3 `protobuf:"bytes,15,rep,name=tags" json:"tags,omitempty"`
}

func (m *TraceLog) Reset()                    { *m = TraceLog{} }
func (m *TraceLog) String() string            { return proto.CompactTextString(m) }
func (*TraceLog) ProtoMessage()               {}
func (*TraceLog) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{4} }

func (m *TraceLog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *TraceLog) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *TraceLog) GetLogID() string {
	if m != nil {
		return m.LogID
	}
	return ""
}

func (m *TraceLog) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *TraceLog) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TraceLog) GetSpanID() uint64 {
	if m != nil {
		return m.SpanID
	}
	return 0
}

func (m *TraceLog) GetParentSpanID() uint64 {
	if m != nil {
		return m.ParentSpanID
	}
	return 0
}

func (m *TraceLog) GetCostInUs() int64 {
	if m != nil {
		return m.CostInUs
	}
	return 0
}

func (m *TraceLog) GetLocalMethod() string {
	if m != nil {
		return m.LocalMethod
	}
	return ""
}

func (m *TraceLog) GetRemoteMethod() string {
	if m != nil {
		return m.RemoteMethod
	}
	return ""
}

func (m *TraceLog) GetRemoteCluster() string {
	if m != nil {
		return m.RemoteCluster
	}
	return ""
}

func (m *TraceLog) GetRemoteService() string {
	if m != nil {
		return m.RemoteService
	}
	return ""
}

func (m *TraceLog) GetRemoteAddress() []byte {
	if m != nil {
		return m.RemoteAddress
	}
	return nil
}

func (m *TraceLog) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *TraceLog) GetTags() []*KeyValueV3 {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MsgV3Header struct {
	Level    string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	LogID    string `protobuf:"bytes,3,opt,name=logID,proto3" json:"logID,omitempty"`
	Ts       int64  `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	SpanID   uint64 `protobuf:"varint,5,opt,name=spanID,proto3" json:"spanID,omitempty"`
}

func (m *MsgV3Header) Reset()                    { *m = MsgV3Header{} }
func (m *MsgV3Header) String() string            { return proto.CompactTextString(m) }
func (*MsgV3Header) ProtoMessage()               {}
func (*MsgV3Header) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{5} }

func (m *MsgV3Header) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *MsgV3Header) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MsgV3Header) GetLogID() string {
	if m != nil {
		return m.LogID
	}
	return ""
}

func (m *MsgV3Header) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *MsgV3Header) GetSpanID() uint64 {
	if m != nil {
		return m.SpanID
	}
	return 0
}

type KeyValueV3 struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValueV3) Reset()                    { *m = KeyValueV3{} }
func (m *KeyValueV3) String() string            { return proto.CompactTextString(m) }
func (*KeyValueV3) ProtoMessage()               {}
func (*KeyValueV3) Descriptor() ([]byte, []int) { return fileDescriptorMsgV3, []int{6} }

func (m *KeyValueV3) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueV3) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgV3Batch)(nil), "ttlogagent_gosdk.MsgV3Batch")
	proto.RegisterType((*TraceLogBatch)(nil), "ttlogagent_gosdk.TraceLogBatch")
	proto.RegisterType((*BatchHeader)(nil), "ttlogagent_gosdk.BatchHeader")
	proto.RegisterType((*MsgV3)(nil), "ttlogagent_gosdk.MsgV3")
	proto.RegisterType((*TraceLog)(nil), "ttlogagent_gosdk.TraceLog")
	proto.RegisterType((*MsgV3Header)(nil), "ttlogagent_gosdk.MsgV3Header")
	proto.RegisterType((*KeyValueV3)(nil), "ttlogagent_gosdk.KeyValueV3")
}
func (m *MsgV3Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgV3Batch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.BatchHeader.Size()))
		n1, err := m.BatchHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Msgs) > 0 {
		for _, msg := range m.Msgs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsgV3(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TraceLogBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceLogBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.BatchHeader.Size()))
		n2, err := m.BatchHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.TraceLogs) > 0 {
		for _, msg := range m.TraceLogs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsgV3(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BatchHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TaskName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.TaskName)))
		i += copy(dAtA[i:], m.TaskName)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if len(m.Psm) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Psm)))
		i += copy(dAtA[i:], m.Psm)
	}
	if len(m.PodName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.PodName)))
		i += copy(dAtA[i:], m.PodName)
	}
	if len(m.Stage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Idc) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Idc)))
		i += copy(dAtA[i:], m.Idc)
	}
	return i, nil
}

func (m *MsgV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgV3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMsgV3(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *TraceLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Level) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.LogID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.LogID)))
		i += copy(dAtA[i:], m.LogID)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.Ts))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.SpanID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.SpanID))
	}
	if m.ParentSpanID != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.ParentSpanID))
	}
	if m.CostInUs != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.CostInUs))
	}
	if len(m.LocalMethod) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.LocalMethod)))
		i += copy(dAtA[i:], m.LocalMethod)
	}
	if len(m.RemoteMethod) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.RemoteMethod)))
		i += copy(dAtA[i:], m.RemoteMethod)
	}
	if len(m.RemoteCluster) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.RemoteCluster)))
		i += copy(dAtA[i:], m.RemoteCluster)
	}
	if len(m.RemoteService) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.RemoteService)))
		i += copy(dAtA[i:], m.RemoteService)
	}
	if len(m.RemoteAddress) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.RemoteAddress)))
		i += copy(dAtA[i:], m.RemoteAddress)
	}
	if m.StatusCode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintMsgV3(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MsgV3Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgV3Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Level) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.LogID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.LogID)))
		i += copy(dAtA[i:], m.LogID)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.Ts))
	}
	if m.SpanID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(m.SpanID))
	}
	return i, nil
}

func (m *KeyValueV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueV3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgV3(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeVarintMsgV3(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgV3Batch) Size() (n int) {
	var l int
	_ = l
	if m.BatchHeader != nil {
		l = m.BatchHeader.Size()
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovMsgV3(uint64(l))
		}
	}
	return n
}

func (m *TraceLogBatch) Size() (n int) {
	var l int
	_ = l
	if m.BatchHeader != nil {
		l = m.BatchHeader.Size()
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if len(m.TraceLogs) > 0 {
		for _, e := range m.TraceLogs {
			l = e.Size()
			n += 1 + l + sovMsgV3(uint64(l))
		}
	}
	return n
}

func (m *BatchHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Psm)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Idc)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	return n
}

func (m *MsgV3) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovMsgV3(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	return n
}

func (m *TraceLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.LogID)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovMsgV3(uint64(m.Ts))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if m.SpanID != 0 {
		n += 1 + sovMsgV3(uint64(m.SpanID))
	}
	if m.ParentSpanID != 0 {
		n += 1 + sovMsgV3(uint64(m.ParentSpanID))
	}
	if m.CostInUs != 0 {
		n += 1 + sovMsgV3(uint64(m.CostInUs))
	}
	l = len(m.LocalMethod)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.RemoteMethod)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.RemoteCluster)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.RemoteService)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.RemoteAddress)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovMsgV3(uint64(m.StatusCode))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovMsgV3(uint64(l))
		}
	}
	return n
}

func (m *MsgV3Header) Size() (n int) {
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.LogID)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovMsgV3(uint64(m.Ts))
	}
	if m.SpanID != 0 {
		n += 1 + sovMsgV3(uint64(m.SpanID))
	}
	return n
}

func (m *KeyValueV3) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsgV3(uint64(l))
	}
	return n
}

func sovMsgV3(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgV3(x uint64) (n int) {
	return sovMsgV3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgV3Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgV3Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgV3Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchHeader == nil {
				m.BatchHeader = &BatchHeader{}
			}
			if err := m.BatchHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &MsgV3{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceLogBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceLogBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceLogBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchHeader == nil {
				m.BatchHeader = &BatchHeader{}
			}
			if err := m.BatchHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceLogs = append(m.TraceLogs, &TraceLog{})
			if err := m.TraceLogs[len(m.TraceLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = append(m.Host[:0], dAtA[iNdEx:postIndex]...)
			if m.Host == nil {
				m.Host = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MsgV3Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &KeyValueV3{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanID", wireType)
			}
			m.ParentSpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentSpanID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostInUs", wireType)
			}
			m.CostInUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostInUs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddress = append(m.RemoteAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteAddress == nil {
				m.RemoteAddress = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &KeyValueV3{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgV3Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgV3Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgV3Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgV3
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgV3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgV3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgV3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgV3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgV3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgV3
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgV3
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgV3(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgV3 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgV3   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msgV3.proto", fileDescriptorMsgV3) }

var fileDescriptorMsgV3 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x31, 0x8f, 0xd3, 0x4c,
	0x10, 0xfd, 0x1c, 0x27, 0xb9, 0xbb, 0x71, 0x72, 0x5f, 0xb4, 0x42, 0xb0, 0x3a, 0x41, 0x14, 0x59,
	0x14, 0x91, 0x90, 0x22, 0x74, 0x07, 0x12, 0x1d, 0x22, 0x77, 0x05, 0x11, 0x1c, 0x85, 0x0f, 0xae,
	0x45, 0x7b, 0xf6, 0xca, 0x89, 0xe2, 0x78, 0x2d, 0xef, 0x24, 0x52, 0x90, 0xe8, 0xa8, 0xa8, 0xf8,
	0x57, 0x50, 0x52, 0x52, 0xa2, 0xf0, 0x47, 0xd0, 0x8e, 0xd7, 0xb1, 0x43, 0x0a, 0x28, 0xa0, 0x9b,
	0x37, 0xf3, 0x66, 0xde, 0xf8, 0xcd, 0x26, 0xe0, 0x2d, 0x74, 0x7c, 0x7d, 0x36, 0xca, 0x72, 0x85,
	0x8a, 0xf5, 0x10, 0x13, 0x15, 0x8b, 0x58, 0xa6, 0xf8, 0x36, 0x56, 0x3a, 0x9a, 0xfb, 0xef, 0x00,
	0x2e, 0x0d, 0x61, 0x2c, 0x30, 0x9c, 0xb2, 0xa7, 0xe0, 0xdd, 0x98, 0xe0, 0xb9, 0x14, 0x91, 0xcc,
	0xb9, 0x33, 0x70, 0x86, 0xde, 0xe9, 0xbd, 0xd1, 0xaf, 0x5d, 0xa3, 0x71, 0x45, 0x0a, 0xea, 0x1d,
	0xec, 0x01, 0x34, 0x17, 0x3a, 0xd6, 0xbc, 0x31, 0x70, 0x87, 0xde, 0xe9, 0x9d, 0xfd, 0x4e, 0x12,
	0x0b, 0x88, 0xe4, 0x7f, 0x74, 0xa0, 0xfb, 0x3a, 0x17, 0xa1, 0x7c, 0xa9, 0xe2, 0xbf, 0xa4, 0xff,
	0x04, 0x8e, 0xd0, 0x4e, 0x2c, 0x97, 0x38, 0xd9, 0x6f, 0x2f, 0x45, 0x83, 0x8a, 0xec, 0x7f, 0x76,
	0xc0, 0xab, 0x8d, 0x65, 0x27, 0x70, 0x88, 0x42, 0xcf, 0x5f, 0x89, 0x85, 0xa4, 0x3d, 0x8e, 0x82,
	0x2d, 0x36, 0xb5, 0x44, 0xa4, 0xf1, 0x52, 0xc4, 0x92, 0x37, 0x8a, 0x5a, 0x89, 0x19, 0x87, 0x83,
	0x30, 0x59, 0x6a, 0x94, 0x39, 0x77, 0xa9, 0x54, 0x42, 0xd6, 0x03, 0x37, 0xd3, 0x0b, 0xde, 0xa4,
	0xac, 0x09, 0x0d, 0x37, 0x53, 0x11, 0x49, 0xb4, 0x0a, 0xae, 0x85, 0xec, 0x16, 0xb4, 0x34, 0x9a,
	0xf1, 0x6d, 0xca, 0x17, 0x80, 0x31, 0x68, 0x4e, 0x95, 0x46, 0x7e, 0x30, 0x70, 0x86, 0x9d, 0x80,
	0x62, 0x33, 0x75, 0x16, 0x85, 0xfc, 0xb0, 0x98, 0x3a, 0x8b, 0x42, 0xff, 0x83, 0x03, 0x2d, 0xb2,
	0x99, 0x3d, 0x86, 0xf6, 0xf4, 0x37, 0x4e, 0x12, 0xd1, 0x3a, 0x69, 0xc9, 0xec, 0x21, 0x34, 0x51,
	0x6c, 0xfd, 0xbb, 0xbb, 0xdf, 0xf4, 0x42, 0xae, 0xaf, 0x45, 0xb2, 0x94, 0xe6, 0x92, 0x86, 0x69,
	0x16, 0x8b, 0x04, 0x0a, 0xfa, 0xe2, 0x4e, 0x40, 0xb1, 0xff, 0xcd, 0x85, 0xc3, 0xd2, 0x68, 0xf3,
	0x3d, 0x89, 0x5c, 0xc9, 0xc4, 0x5a, 0x59, 0x00, 0xf2, 0x51, 0x85, 0x02, 0x67, 0x2a, 0xdd, 0xfa,
	0x68, 0x31, 0x75, 0xa8, 0x78, 0x72, 0x61, 0x5d, 0x2c, 0x00, 0x3b, 0x86, 0x06, 0x6a, 0xb2, 0xd0,
	0x0d, 0x1a, 0x48, 0xc2, 0xb8, 0xce, 0x4a, 0xfb, 0x28, 0x66, 0xb7, 0xa1, 0xad, 0x33, 0x91, 0x4e,
	0x2e, 0xc8, 0xbc, 0x66, 0x60, 0x11, 0xf3, 0xa1, 0x93, 0x89, 0x5c, 0xa6, 0x78, 0x55, 0x54, 0x0f,
	0xa8, 0xba, 0x93, 0x33, 0x1b, 0x85, 0x4a, 0xe3, 0x24, 0x7d, 0xa3, 0xc9, 0x52, 0x37, 0xd8, 0x62,
	0x36, 0x00, 0xcf, 0x6c, 0x97, 0x5c, 0x4a, 0x9c, 0xaa, 0x88, 0x1f, 0x91, 0x64, 0x3d, 0x65, 0x14,
	0x72, 0xb9, 0x50, 0x28, 0x2d, 0x05, 0x88, 0xb2, 0x93, 0x63, 0xf7, 0xa1, 0x5b, 0xe0, 0x73, 0xfb,
	0x4a, 0x3c, 0x22, 0xed, 0x26, 0x2b, 0xd6, 0x95, 0xcc, 0x57, 0xb3, 0x50, 0xf2, 0x4e, 0x9d, 0x65,
	0x93, 0x15, 0xeb, 0x59, 0x14, 0xe5, 0x52, 0x6b, 0xde, 0x25, 0xff, 0x77, 0x93, 0xac, 0x0f, 0xa0,
	0x51, 0xe0, 0x52, 0x9f, 0xab, 0x48, 0xf2, 0xe3, 0x81, 0x33, 0x6c, 0x05, 0xb5, 0xcc, 0xf6, 0xdc,
	0xff, 0xff, 0xe9, 0xb9, 0xfd, 0xf7, 0xe0, 0xd5, 0xde, 0xcd, 0x3f, 0x3b, 0x6e, 0x75, 0xc8, 0x56,
	0xfd, 0x90, 0xfe, 0x23, 0x80, 0x6a, 0x25, 0xf3, 0x03, 0x98, 0xcb, 0xb5, 0xd5, 0x36, 0xa1, 0x99,
	0xbe, 0x32, 0x45, 0x2b, 0x5b, 0x80, 0x71, 0xef, 0xcb, 0xa6, 0xef, 0x7c, 0xdd, 0xf4, 0x9d, 0xef,
	0x9b, 0xbe, 0xf3, 0xe9, 0x47, 0xff, 0xbf, 0x9b, 0x36, 0xfd, 0x29, 0x9e, 0xfd, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0xf9, 0xaf, 0x0f, 0x21, 0x23, 0x05, 0x00, 0x00,
}
